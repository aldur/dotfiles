" Modeline and Notes {{{
" vim: set foldlevel=0 foldmethod=marker spell formatoptions=jcrql:
" }}}

" Initialization {{{
    " Define a global autogroup used through the entire vimrc
    augroup vimrc
        autocmd!
    augroup end

    " {{{ Providers
        " This needs to be done before loading plugins, as they might
        " require/load providers.

        " Disable non-required providers
        if has('nvim')
            let g:loaded_python_provider = 0  " Disable Python 2 support.
            let g:loaded_ruby_provider = 0  " Disable Ruby support.
            let g:loaded_node_provider = 0  " Disable nodeJS support.
        endif

        " Path to homebrew Python3 for nvim
        if filereadable('/usr/local/bin/python3')
            let g:python3_host_prog = '/usr/local/bin/python3'
        end

        " Disable some of VIM standard plugins
        let g:loaded_2html_plugin = 1  " Disable tohtml.vim
        let g:loaded_tutor_mode_plugin = 1  " Disable vimtutor
    " }}}
" }}}

" Vim-plug {{{
    " Auto-install Vim-plug (if needed)
    if empty(glob('~/.vim/autoload/plug.vim')) && executable('curl')
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd vimrc VimEnter * PlugInstall
    endif
    call plug#begin('~/.vim/plugged')

    " The list of installed plugins
    Plug 'Konfekt/FastFold'                        " Better fold refresh
    Plug 'keith/investigate.vim'                   " Smart documentation finder
    Plug 'machakann/vim-highlightedyank'           " Highlight last yanked object
    Plug 'dense-analysis/ale'                      " Async linting engine
    Plug 'romainl/vim-qf'                          " Fix the quickfix
    Plug 'tmsvg/pear-tree'                         " Auto-pair
    Plug 'tommcdo/vim-lion'                        " Add gl/gL to align text
    Plug 'tpope/vim-commentary'                    " Toggle comments
    Plug 'tpope/vim-repeat'                        " Enable supported plugin actions to be repeated with '.'
    Plug 'tpope/vim-surround'                      " All about surrounding

    " Plug 'tpope/vim-fugitive'                      " A GIT wrapper

    Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }

    " Fuzzy files, tags, life.
    if has('mac') && executable('fzf')  " Install `fzf` with homebrew
        Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
    else  " Install it as a local plugin
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'
    end

    Plug 'lervag/wiki.vim'
    if executable('rg')
        Plug 'alok/notational-fzf-vim'
    end

    " Appearance and Statusline
    Plug 'itchyny/lightline.vim'                  " Configure the statusbar
    Plug 'fatih/molokai'                          " Molokai color scheme

    " Language specific plugins {{{
        " Proper Python indent
        Plug 'Vimjas/vim-python-pep8-indent', { 'for': 'python' }

        " Latex
        Plug 'lervag/vimtex', { 'for': 'tex' }

        " Go
        Plug 'fatih/vim-go', { 'for': 'go' }

        " Markdown
        Plug 'plasticboy/vim-markdown', { 'for': 'markdown' }
    " }}}

    let b:has_nvim_python3 = has('nvim') && has('python3')

    " Deoplete and its plugins {{{
        " Conditionally load `deoplete` and friends if on `nvim` with `python3`.
        Plug 'Shougo/deoplete.nvim', b:has_nvim_python3 ? { 'do': ':UpdateRemotePlugins' } : { 'on': [] }

        " Go completion
        Plug 'zchee/deoplete-go', b:has_nvim_python3 ? { 'do': ':make' } : { 'on': [] }

        " VIM completion
        Plug 'Shougo/neco-vim', b:has_nvim_python3 ? {} : { 'on': [] }

        " Dictionary completion
        Plug 'deoplete-plugins/deoplete-dictionary', b:has_nvim_python3 ? {} : { 'on': [] }
    " }}}

    if executable('ctags')
        Plug 'ludovicchabant/vim-gutentags'            " Automatic tag management

        " ...and tag completion
        Plug 'deoplete-plugins/deoplete-tag', b:has_nvim_python3 ? {} : { 'on': [] }
    endif

    " Snippets  {{{
        " Conditionally load `ultisnips` if on `nvim` with `python3`.

        " Snippets engine
        Plug 'SirVer/ultisnips', b:has_nvim_python3 ? {} : { 'on': [] }
        " Vim snippets
        Plug 'honza/vim-snippets', b:has_nvim_python3 ? {} : { 'on': [] }
    " }}}

    " ...Vim-plug is done
    call plug#end()

    " Load the `matchit` plugin from VIM's runtime.
    packadd! matchit
" }}}

" General {{{
    " Sets how many lines of history VIM has to remember
    set history=10000 " Maximum value for history

    " Modeline in the first three lines
    set modeline
    set modelines=3

    " Mouse
    set mouse=a
    set mousehide               " Hide the mouse cursor while typing

    set noswapfile  " Stop annoying swap files

    set updatetime=1000  " ms to trigger the CursorHold/CursorHoldI events

    " With a map leader it's possible to do extra key combinations
    let g:mapleader = "\<Space>"
    let g:maplocalleader = "\<Space>"
" }}}

" Appearance {{{
    set scrolloff=8       " don't scroll any closer to top/bottom
    set sidescrolloff=5   " don't scroll any closer to left/right

    " No annoying sound on errors
    set noerrorbells visualbell t_vb=
    autocmd vimrc GUIEnter * set visualbell t_vb=

    " Allow the cursor to be one more the last char.
    set virtualedit=onemore
" }}}

" Text, lines, tab, indent and folding {{{
    set backspace=indent,eol,start                     " Backspace for dummies
    set whichwrap=b,s,h,l,<,>,[,]                      " Backspace and cursor keys wrap too

    " Line wrapping
    set wrap                                           " Visually wrap lines too long
    set textwidth=0 wrapmargin=0                       " Turn off physical line wrapping
    set breakindent                                    " Preserve indent of wrapped lines

    " Do not insert comment leader on 'o'
    " Needs an autocmd because different filetypes override this option
    autocmd vimrc FileType * setlocal formatoptions-=o
" }}}

" Misc mappings {{{
    " Quickly change current working directory to buffer's
    nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

    " Remap VIM 0 to first non-blank character
    map 0 ^

    " Treat long lines as break lines (useful when moving around in them)
    noremap j gj
    noremap k gk
    noremap gj j
    noremap gk k

    " Disable highlight when <leader><cr> is pressed
    nnoremap <silent> <leader><cr> :noh<cr>

    " Toggle paste mode on and off
    nnoremap <localleader>pp :setlocal paste!<cr>

    " Make Y yank everything from the cursor to the end of the line.
    noremap Y y$

    " Quickly call 'make'
    nnoremap <leader>m :make<cr>

    " Use 'c*' to change the word under the cursor, repeat with '.'
    nnoremap c* *<C-o>cgn

    if &term =~? '^screen'
        " tmux will send xterm-style keys when xterm-keys is on
        execute "set <xUp>=\e[1;*A"
        execute "set <xDown>=\e[1;*B"
        execute "set <xRight>=\e[1;*C"
        execute "set <xLeft>=\e[1;*D"
    endif

    " Useful mappings for managing tabs
    nnoremap <leader>tn :tabnew<cr>
    nnoremap <leader>to :tabonly<cr>
    nnoremap <leader>tc :tabclose<cr>

    " Spell checking
    nnoremap <localleader>ss :setlocal spell!<cr>
" }}}

" Misc {{{
    set iskeyword-=.                    " '.' is an end of word designator
    set iskeyword-=#                    " '#' is an end of word designator
    set iskeyword-=-                    " '-' is an end of word designator
" }}}

" Plugin settings {{{
    " Investigate {{{
        " Use Dash on macOS (if available)
        let g:investigate_use_dash=1

        nnoremap K :call investigate#Investigate('n')<CR>
        vnoremap K :call investigate#Investigate('v')<CR>
    " }}}

    " pear-tree {{{
        let g:pear_tree_ft_disabled = []
    " }}}

    " vim.wiki {{{
        let g:wiki_root = '~/Documents/Notes'
        let g:wiki_filetypes = ['md']
        let g:wiki_link_target_type = 'md'

        let g:wiki_export = {
            \ 'args' : '--self-contained ' .
            \ '--lua-filter ' . g:wiki_root . '/assets/header_as_title.lua ' .
            \ '--lua-filter ' . g:wiki_root . '/assets/todo_to_checkbox.lua ' .
            \ '--template GitHub.html5 ' .
            \ '--data-dir ' . g:wiki_root . '/assets/',
            \ 'from_format' : 'markdown',
            \ 'ext' : 'html',
            \ 'view' : v:true,
            \ 'output': fnamemodify(tempname(), ':h'),
            \}

        " Disable unused mappings
        let g:wiki_mappings_global = {
                    \ '<plug>(wiki-index)' : '<plug>',
                    \ '<plug>(wiki-open)' : '<plug>',
                    \ '<plug>(wiki-reload)' : '<plug>',
                    \ '<plug>(wiki-page-toc)' : '<plug>',
                    \ '<plug>(wiki-page-toc-local)' : '<plug>',
                    \ '<plug>(wiki-tag-list)' : '<plug>',
                    \ '<plug>(wiki-tag-reload)' : '<plug>',
                    \ '<plug>(wiki-tag-search)' : '<plug>',
                    \ '<plug>(wiki-link-next)' : '<plug>',
                    \ '<plug>(wiki-link-prev)' : '<plug>',
                    \ '<plug>(wiki-link-toggle)' : '<plug>',
                    \ '<plug>(wiki-link-open)' : '<plug>',
                    \}

        let g:wiki_mappings_local = g:wiki_mappings_global

        let g:wiki_list_todos = ['TODO', 'DONE']

        " Fix temporary error in creating links.
        let g:wiki_map_link_create = 'WikiMapLinkCreate'
        function! WikiMapLinkCreate(text) abort
            return a:text
        endfunction

        " Configure `notational-fzf-vim`
        let g:nv_search_paths = [g:wiki_root, ]
        let g:nv_create_note_window = 'edit'
    " }}}


" }}}

" Ending settings {{{
    if filereadable(expand('~/.vimrc.local'))
        source ~/.vimrc.local
    endif

    set secure
" }}}
