" Modeline and Notes {{{
" vim: set foldlevel=0 foldmethod=marker spell formatoptions=jcrql:
" }}}

" Initialization {{{
    " Define a global autogroup used through the entire vimrc
    augroup vimrc
        autocmd!
    augroup end
" }}}

" Vim-plug {{{
    " Auto-install Vim-plug (if needed)
    if empty(glob('~/.vim/autoload/plug.vim')) && executable('curl')
        silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
        autocmd vimrc VimEnter * PlugInstall
    endif
    call plug#begin('~/.vim/plugged')

    " The list of installed plugins
    Plug 'Konfekt/FastFold'                        " Better fold refresh
    Plug 'SirVer/ultisnips'                        " Snippets engine
    Plug 'honza/vim-snippets'                      " Vim snippets
    Plug 'keith/investigate.vim'                   " Smart documentation finder
    Plug 'ludovicchabant/vim-gutentags'            " Automatic tag management
    Plug 'machakann/vim-highlightedyank'           " Highlight last yanked object
    Plug 'neomake/neomake'                         " Asynchronous Syntax Checkers
    Plug 'romainl/vim-qf'                          " Fix the quickfix
    Plug 'sbdchd/neoformat'                        " Code auto-formatting
    Plug 'tmsvg/pear-tree'                         " Auto-pair
    Plug 'tommcdo/vim-lion'                        " Add gl/gL to align text
    Plug 'tpope/vim-commentary'                    " Toggle comments
    Plug 'tpope/vim-repeat'                        " Enable supported plugin actions to be repeated with '.'
    Plug 'tpope/vim-surround'                      " All about surrounding

    " Fuzzy files, tags, life.
    if has('mac') && executable('fzf')  " Install `fzf` with homebrew
        Plug '/usr/local/opt/fzf' | Plug 'junegunn/fzf.vim'
    else  " Install it as a local plugin
        Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
        Plug 'junegunn/fzf.vim'
    end

    " Appearance and Statusline
    Plug 'itchyny/lightline.vim'                  " Configure the statusbar
    Plug 'fatih/molokai'                          " Molokai color scheme

    " Language specific plugins {{{
        " Python virtualenvs within VIM
        Plug 'jmcantrell/vim-virtualenv', { 'for': 'python' }

        " Latex
        Plug 'lervag/vimtex', { 'for': 'tex' }

        " Go
        Plug 'fatih/vim-go', { 'for': 'go', 'do': ':GoUpdateBinaries' }
    " }}}

    " Deoplete and its plugins {{{
        Plug 'Shougo/deoplete.nvim', has('nvim') ? { 'do': ':UpdateRemotePlugins' } : {}

        " Required dependencies for standard VIM.
        Plug 'roxma/nvim-yarp', has('nvim') ? { 'on': [] } : {  }
        Plug 'roxma/vim-hug-neovim-rpc', has('nvim') ? { 'on': [] } : {  }

        Plug 'zchee/deoplete-jedi'                  " Python completion
        Plug 'zchee/deoplete-go', { 'do': 'make' }  " Go completion
        Plug 'Shougo/neco-vim'                      " VIM dictionary completion

        if executable('look')
            Plug 'ujihisa/neco-look'                    " Spell completion
        endif
    " }}}

    " Enable Vim-stay after all the other plugins
    Plug 'kopischke/vim-stay'                      " Save and restore cursor position, folds and so on
    Plug 'sheerun/vim-polyglot'                    " Additional syntaxes / indent, load it after syntax specific plugins

    " ...Vim-plug is done
    call plug#end()
" }}}

" General {{{
    " Sets how many lines of history VIM has to remember
    set history=10000 " Maximum value for history

    " Modeline in the first three lines
    set modeline
    set modelines=3

    " Mouse
    set mouse=a
    set mousehide               " Hide the mouse cursor while typing

    set noswapfile  " Stop annoying swap files

    set updatetime=1000  " ms to trigger the CursorHold/CursorHoldI events

    " With a map leader it's possible to do extra key combinations
    let g:mapleader = "\<Space>"
    let g:maplocalleader = "\<Space>"
" }}}

" Appearance {{{
    set scrolloff=8       " don't scroll any closer to top/bottom
    set sidescrolloff=5   " don't scroll any closer to left/right

    " No annoying sound on errors
    set noerrorbells visualbell t_vb=
    autocmd vimrc GUIEnter * set visualbell t_vb=

    " Allow the cursor to be one more the last char.
    set virtualedit=onemore
" }}}

" Text, lines, tab, indent and folding {{{
    set backspace=indent,eol,start                     " Backspace for dummies
    set whichwrap=b,s,h,l,<,>,[,]                      " Backspace and cursor keys wrap too

    " Line wrapping
    set wrap                                           " Visually wrap lines too long
    set textwidth=0 wrapmargin=0                       " Turn off physical line wrapping
    set breakindent                                    " Preserve indent of wrapped lines

    " Do not insert comment leader on 'o'
    " Needs an autocmd because different filetypes override this option
    autocmd vimrc FileType * setlocal formatoptions-=o
" }}}

" Misc mappings {{{
    " Quickly change current working directory to buffer's
    nnoremap <leader>cd :cd %:p:h<CR>:pwd<CR>

    " Remap VIM 0 to first non-blank character
    map 0 ^

    " Treat long lines as break lines (useful when moving around in them)
    noremap j gj
    noremap k gk
    noremap gj j
    noremap gk k

    " Disable highlight when <leader><cr> is pressed
    nnoremap <silent> <leader><cr> :noh<cr>

    " Toggle paste mode on and off
    nnoremap <localleader>pp :setlocal paste!<cr>

    " Make Y yank everything from the cursor to the end of the line.
    noremap Y y$

    " Quickly call 'make'
    nnoremap <leader>m :make<cr>

    " Use 'c*' to change the word under the cursor, repeat with '.'
    nnoremap c* *<C-o>cgn

    if &term =~? '^screen'
        " tmux will send xterm-style keys when xterm-keys is on
        execute "set <xUp>=\e[1;*A"
        execute "set <xDown>=\e[1;*B"
        execute "set <xRight>=\e[1;*C"
        execute "set <xLeft>=\e[1;*D"
    endif

    " Useful mappings for managing tabs
    nnoremap <leader>tn :tabnew<cr>
    nnoremap <leader>to :tabonly<cr>
    nnoremap <leader>tc :tabclose<cr>

    " Spell checking
    nnoremap <localleader>ss :setlocal spell!<cr>
" }}}

" Misc {{{
    set iskeyword-=.                    " '.' is an end of word designator
    set iskeyword-=#                    " '#' is an end of word designator
    set iskeyword-=-                    " '-' is an end of word designator
" }}}

" Plugin settings {{{
    " Markdown {{{
        " Highlight YAML front matter.
        let g:vim_markdown_frontmatter = 1

        let g:vim_markdown_no_default_key_mappings = 1
        let g:vim_markdown_conceal = 0
    " }}}

    " Neoformat {{{
        nnoremap <leader>f :<C-u>Neoformat<CR>
    " }}}

    " Investigate {{{
        " Use Dash on macOS (if available)
        let g:investigate_use_dash=1

        nnoremap K :call investigate#Investigate('n')<CR>
        vnoremap K :call investigate#Investigate('v')<CR>
    " }}}

    " Targets {{{
        let g:targets_pairs = '()b {}B []S <>t'
    " }}}

    " vim-polyglot {{{
        let g:polyglot_disabled = ['tex', 'latex', 'python-compiler', ]
    " }}}
" }}}

" Ending settings {{{
    if filereadable(expand('~/.vimrc.local'))
        source ~/.vimrc.local
    endif

    set secure
" }}}
